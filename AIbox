package rpgGridBrawl;

import java.io.FileNotFoundException;
import java.util.concurrent.ExecutionException;

/**
 * 
 * The purpose of the AIbox is to serve as a simple API for getting AI decisions.
 * All you should need to do is, input an AInode.toString() or a GameData object, call AIbox.getLocalDecision() 
 * and you will get back an AIresult telling you what the AI thinks you should do.
 * AIbox uses AIstructure4, which only gets the local decision.  AIbox can also spit out random moves, using the AIrandomizer class.
 *
 */
public class AIbox {
	private static AInode boxNode;
	private static String boxNodeString;
	private static String personality;
	
	public AIbox(String nodeString) {
		boxNodeString = nodeString;
		boxNode = new AInode(nodeString);
		personality = "standard";
	}
	
	public AIbox(GameData crt) {
		boxNode = new AInode(crt);
		boxNodeString = boxNode.toString();
		personality = "standard";
	}
	
	public AIbox(String nodeString, String p) {
		boxNodeString = nodeString;
		boxNode = new AInode(nodeString);
		personality = p;
	}
	
	public AIbox(GameData crt, String p) {
		boxNode = new AInode(crt);
		boxNodeString = boxNode.toString();
		personality = p;
	}
	
	public AIresult getLocalDecision() throws FileNotFoundException, InterruptedException, ExecutionException {
		boolean legalMove = false;
		int retries = 0;
		AIresult result = new AIresult();
		do {
			AIstructure4 wopr = new AIstructure4(boxNodeString, new ScoringProfile(personality));
			result = wopr.makeLocalDecision();
			if (result.getAction() == 0) {
				legalMove = false;
				retries++;
			}
			else legalMove = true;
		} while(!legalMove && retries < 5);
		return result;
	}
	
	// this method is currently not in use as AIstructure3 will need to be rewritten, probably as AIstructure5
	public AIresult getDecision() {
		boxNodeString = boxNode.toString();
		AIstructure3 hal = new AIstructure3(boxNodeString, new ScoringProfile(personality));
		return hal.makeDecision();
	}
	
	public String getDecisionAsSuggestion() throws FileNotFoundException, InterruptedException, ExecutionException {
		String suggestion = "";
		AIresult result = this.getLocalDecision();
		Interaction interact = new Interaction();
		suggestion = interact.reportOnAISelection(result);
		return ("The AI suggests: " + suggestion);
	}
	
	public AIresult getRandomAction() {
		AIresult result = new AIresult();
		boolean randomizerSuccess = false;
		int retries = 0;
		while (!randomizerSuccess && retries < 10) {
			try {
				AIrandomizer randomizer = new AIrandomizer(boxNodeString);
				result = randomizer.randomAction();
				randomizerSuccess = true;
			} catch(Exception ex) { randomizerSuccess = false; }
			retries++;
		}
		return result;
	}
	
	public void refresh(String nodeString) {
		boxNode.setToString(nodeString);
		boxNodeString = nodeString;
	}
}
